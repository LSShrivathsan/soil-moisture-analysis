# -*- coding: utf-8 -*-
"""soil mositure analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E1uCADALJ8pBqNiyUEIPdgMkaCeXDq4m
"""

import numpy as np
import pandas as pd

np.random.seed(0)
num_samples = 100

# 1. Irrigation Dataset
temperature_irrigation = np.random.uniform(15, 25, num_samples)
humidity_irrigation = np.random.uniform(40, 60, num_samples)
soil_moisture_irrigation = 30 - 0.1 * temperature_irrigation + 0.2 * humidity_irrigation + np.random.normal(0, 2, num_samples)
irrigation_data = pd.DataFrame({'Temperature (째C)': temperature_irrigation,
                                'Humidity (%)': humidity_irrigation,
                                'Soil Moisture (%)': soil_moisture_irrigation})

# 2. Drainage Dataset
temperature_drainage = np.random.uniform(20, 30, num_samples)
humidity_drainage = np.random.uniform(70, 80, num_samples)
soil_moisture_drainage = 30 - 0.1 * temperature_drainage + 0.2 * humidity_drainage + np.random.normal(0, 2, num_samples)
drainage_data = pd.DataFrame({'Temperature (째C)': temperature_drainage,
                              'Humidity (%)': humidity_drainage,
                              'Soil Moisture (%)': soil_moisture_drainage})

# 3. Optimal Soil Moisture Dataset
temperature_optimal = np.random.uniform(20, 25, num_samples)
humidity_optimal = np.random.uniform(60, 70, num_samples)
soil_moisture_optimal = 30 - 0.1 * temperature_optimal + 0.2 * humidity_optimal + np.random.normal(0, 2, num_samples)
optimal_data = pd.DataFrame({'Temperature (째C)': temperature_optimal,
                             'Humidity (%)': humidity_optimal,
                             'Soil Moisture (%)': soil_moisture_optimal})

irrigation_data.to_csv('irrigation_dataset.csv', index=False)
drainage_data.to_csv('drainage_dataset.csv', index=False)
optimal_data.to_csv('optimal_dataset.csv', index=False)

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('irrigation_dataset.csv')

# Extract features (e.g., temperature, humidity) and target (soil moisture)
X = data[['Temperature (째C)', 'Humidity (%)']]
y = data['Soil Moisture (%)']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define a parameter grid for hyperparameter tuning
param_grid = {
    'n_estimators': [100, 200, 300],
    'learning_rate': [0.01, 0.1, 0.2],
    'max_depth': [3, 4, 5],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# Create a Gradient Boosting Regressor model
gb_model = GradientBoostingRegressor(random_state=42)

# Perform a grid search with cross-validation to find the best hyperparameters
grid_search = GridSearchCV(estimator=gb_model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search.fit(X_train, y_train)

# Get the best hyperparameters from the grid search
best_params = grid_search.best_params_
print(f'Best Hyperparameters: {best_params}')

# Train the model with the best hyperparameters
best_gb_model = GradientBoostingRegressor(random_state=42, **best_params)
best_gb_model.fit(X_train, y_train)

# Make predictions on the test data using the best model
y_gb_pred = best_gb_model.predict(X_test)

# Evaluate the best model's performance using metrics
mse_gb = mean_squared_error(y_test, y_gb_pred)
r2_gb = r2_score(y_test, y_gb_pred)
print(f'Gradient Boosting Mean Squared Error: {mse_gb}')
print(f'Gradient Boosting R-squared: {r2_gb}')

# Soil moisture decision thresholds (adjust as needed)
irrigationThreshold = 40
drainageThreshold = 60

# Iterate through each prediction and make a decision
decisions = []
for i in range(len(y_gb_pred)):
    if y_gb_pred[i] < irrigationThreshold:
        decisions.append(f"Data Point {i+1}: Decision - Irrigate the soil")
    elif y_gb_pred[i] > drainageThreshold:
        decisions.append(f"Data Point {i+1}: Decision - Drain the soil")
    else:
        decisions.append(f"Data Point {i+1}: Decision - Soil moisture is optimal")

# Plot actual vs. predicted soil moisture values
plt.scatter(y_test, y_gb_pred)
plt.xlabel('Actual Soil Moisture (%)')
plt.ylabel('Predicted Soil Moisture (%)')
plt.title('Actual vs. Predicted Soil Moisture')
plt.show()

# Display the decisions
for decision in decisions:
    print(decision)